
// TODO: Transaction Enabled

package edu.wmich.cs.guo.controller;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.wmich.cs.guo.json.ProductJSON;
import edu.wmich.cs.guo.model.Category;
import edu.wmich.cs.guo.model.Manufacture;
import edu.wmich.cs.guo.model.Product;
import edu.wmich.cs.guo.model.Store;
import edu.wmich.cs.guo.model.StoreProductRelation;
import edu.wmich.cs.guo.repository.CategoryRepository;
import edu.wmich.cs.guo.repository.ManufactureRepository;
import edu.wmich.cs.guo.repository.ProductRepository;
import edu.wmich.cs.guo.repository.StoreProductRelationRepository;
import edu.wmich.cs.guo.repository.StoreRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/") // This means URL's start with / (after Application path)
public class MVCController {
	// This means to get the bean called productRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private ProductRepository productRepository;
	@Autowired
	private CategoryRepository categoryRepository;
	@Autowired
	private ManufactureRepository manufactureRepository;
	@Autowired
	private StoreRepository storeRepository;
	@Autowired
	private StoreProductRelationRepository storeProductRelationRepository;

	@GetMapping(path = "/add")
	public String insertProduct(Model model) {
		model.addAttribute("productJSON", new ProductJSON());
		return "product";
	}

	// TODO: Make form submission support both post and put request depending on whether the item exists
	@PostMapping(path = "/add")
	public String insertProduct(ProductJSON productJSON) {

		Manufacture manufacture;
		manufacture = manufactureRepository.findByName(productJSON.getManufactureName());
		if (manufacture == null) {
			manufacture = new Manufacture();
			manufacture.setName(productJSON.getManufactureName());
			manufacture.setAddress(productJSON.getManufactureAddress());
			manufacture.setDescription(productJSON.getManufactureDescription());
			manufactureRepository.save(manufacture);
		}

		Category category;
		category = categoryRepository.findByName(productJSON.getCategoryName());
		if (category == null) {
			category = new Category();
			category.setName(productJSON.getCategoryName());
			category.setDescription(productJSON.getCategoryDescription());
			categoryRepository.save(category);
		}

		Store store;
		store = storeRepository.findByName(productJSON.getStoreName());
		if (store == null) {
			store = new Store();
			store.setName(productJSON.getStoreName());
			store.setLocation(productJSON.getStoreLocation());
			storeRepository.save(store);
		}

		Product product = new Product();
		product.setName(productJSON.getProductName());
		product.setBarcode(productJSON.getProductBarcode());
		product.setDescription(productJSON.getProductDescription());
		product.setWeight(productJSON.getProductWeight());
		product.setImageUrl(productJSON.getProductImageUrl());
		product.setSpecification(productJSON.getProductSpecification());
		product.setManufacture(manufacture);
		product.setCategory(category);
		productRepository.save(product);

		StoreProductRelation spr = new StoreProductRelation();
		spr.setStore(store);
		spr.setProduct(product);
		spr.setQuantity(productJSON.getQuantity());
		spr.setPrice(productJSON.getPrice());
		spr.setLastUpdated(new Timestamp(System.currentTimeMillis()));
		storeProductRelationRepository.save(spr);

		return "result";
	}

	// CRUD: Read
	@GetMapping(path = "/product/{barcode}")
	public ResponseEntity<Product> getProductByBarcode(@PathVariable("barcode") String barcode) {
		Product product = productRepository.findByBarcode(barcode);
		if (product != null) { // product exists in db
			return new ResponseEntity<Product>(product, HttpStatus.OK);
		}
		// product not exists in db
		return new ResponseEntity<Product>(product, HttpStatus.NOT_FOUND);
	}

	// CRUD: Update
	@PutMapping(path = "/product")
	public ResponseEntity<Product> updateProduct(@RequestBody Product product) {
		productRepository.save(product);
		return new ResponseEntity<Product>(product, HttpStatus.OK);
	}

	@GetMapping(path = "/{id}")
	public @ResponseBody Product getOneProduct(@PathVariable int id) {
		// This returns a JSON or XML with the products
		return productRepository.findOne(1);
	}

	/* Operation to the Store Table */

	/* Operation to the Manufacture Table */

	/* Operation to the StoreProductRelation Table */

}
