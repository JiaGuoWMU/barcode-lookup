
// TODO: Transaction Enabled
// TODO: Update the database table attributes

package edu.wmich.cs.guo.controller;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import edu.wmich.cs.guo.json.ProductJSON;
import edu.wmich.cs.guo.model.Category;
import edu.wmich.cs.guo.model.Manufacture;
import edu.wmich.cs.guo.model.Product;
import edu.wmich.cs.guo.model.Store;
import edu.wmich.cs.guo.model.StoreProductRelation;
import edu.wmich.cs.guo.repository.CategoryRepository;
import edu.wmich.cs.guo.repository.ManufactureRepository;
import edu.wmich.cs.guo.repository.ProductRepository;
import edu.wmich.cs.guo.repository.StoreProductRelationRepository;
import edu.wmich.cs.guo.repository.StoreRepository;

@RestController // This means that this class is a Rest Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class APIController {
	// This means to get the bean called productRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private ProductRepository productRepository;
	@Autowired
	private CategoryRepository categoryRepository;
	@Autowired
	private ManufactureRepository manufactureRepository;
	@Autowired
	private StoreRepository storeRepository;
	@Autowired
	private StoreProductRelationRepository storeProductRelationRepository;

	/* Operation to the Product Table */
	// CRUD: Create
	@PostMapping(path = "/product")
	public ResponseEntity<Product> createProduct(@RequestBody ProductJSON productJSON) {

		Manufacture manufacture;
		manufacture = manufactureRepository.findByName(productJSON.getManufactureName());
		if (manufacture == null) {
			manufacture = new Manufacture();
			manufacture.setName(productJSON.getManufactureName());
			manufacture.setAddress(productJSON.getManufactureAddress());
			manufacture.setDescription(productJSON.getManufactureDescription());
			manufactureRepository.save(manufacture);
		}

		Category category;
		category = categoryRepository.findByName(productJSON.getCategoryName());
		if (category == null) {
			category = new Category();
			category.setName(productJSON.getCategoryName());
			category.setDescription(productJSON.getCategoryDescription());
			categoryRepository.save(category);
		}

		Store store;
		store = storeRepository.findByName(productJSON.getStoreName());
		if (store == null) {
			store = new Store();
			store.setName(productJSON.getStoreName());
			store.setLocation(productJSON.getStoreLocation());
			storeRepository.save(store);
		}

		Product product = new Product();
		product.setName(productJSON.getProductName());
		product.setBarcode(productJSON.getProductBarcode());
		product.setDescription(productJSON.getProductDescription());
		product.setWeight(productJSON.getProductWeight());
		product.setImageUrl(productJSON.getProductImageUrl());
		product.setSpecification(productJSON.getProductSpecification());
		product.setManufacture(manufacture);
		product.setCategory(category);
		productRepository.save(product);

		StoreProductRelation spr = new StoreProductRelation();
		spr.setStore(store);
		spr.setProduct(product);
		spr.setQuantity(productJSON.getQuantity());
		spr.setPrice(productJSON.getPrice());
		spr.setLastUpdated(new Timestamp(System.currentTimeMillis()));
		storeProductRelationRepository.save(spr);

		return new ResponseEntity<Product>(product, HttpStatus.OK);
	}

	// CRUD: Read
	@GetMapping(path = "product/{barcode}")
	public ResponseEntity<Product> getProductByBarcode(@PathVariable("barcode") String barcode) {
		Product product = productRepository.findByBarcode(barcode);
		if (product != null) { // product exists in db
			return new ResponseEntity<Product>(product, HttpStatus.OK);
		}
		// product not exists in db
		return new ResponseEntity<Product>(new Product(), HttpStatus.NOT_FOUND);
	}

	// Return all the products using JSON
	@GetMapping(path = "product/all")
	public ResponseEntity<Iterable<Product>> getAllProducts() {
		return new ResponseEntity<Iterable<Product>>(productRepository.findAll(), HttpStatus.OK);
	}

	// CRUD: Update
	@PutMapping(path = "/product")
	public ResponseEntity<Product> updateProduct(@RequestBody Product product) {
		productRepository.save(product);
		return new ResponseEntity<Product>(product, HttpStatus.OK);
	}

	// CRUD: Delete
	// TODO: A TRIGGER needs to be added for DELETE FROM StoreProductRelation Table
	@DeleteMapping(path = "/product/{barcode}")
	public ResponseEntity<Void> deleteProduct(@PathVariable("barcode") String barcode) {
		Product product = productRepository.findByBarcode(barcode);
		if (product != null) { // product exists in db
			productRepository.delete(product);
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		}
		// product not exists in db
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
	}

	@PostMapping(path = "sell")
	public ResponseEntity<StoreProductRelation> addSell(@RequestBody StoreProductRelation spr) {

		// set product and store
		spr.setProduct(productRepository.findByName(spr.getProduct().getName()));
		;
		spr.setStore(storeRepository.findByName(spr.getStore().getName()));
		;
		storeProductRelationRepository.save(spr);

		return new ResponseEntity<StoreProductRelation>(spr, HttpStatus.OK);
	}

	/* Operation to the Store Table */

	/* Operation to the Manufacture Table */

	/* Operation to the StoreProductRelation Table */

	// @GetMapping(path = "/add") // Map ONLY GET Requests
	// public @ResponseBody String addNewProduct(@RequestParam String name,
	// @RequestParam String barcode) {
	// // @ResponseBody means the returned String is the response, not a view name
	// // @RequestParam means it is a parameter from the GET or POST request
	//
	// Product n = new Product();
	// n.setName(name);
	// n.setBarcode(barcode);
	// productRepository.save(n);
	// return "Saved";
	// }

	// @GetMapping(path = "/{id}")
	// public @ResponseBody Product getOneProduct(@PathVariable int id) {
	// // This returns a JSON or XML with the products
	// return productRepository.findOne(1);
	// }

	// @GetMapping(path = "/all")
	// public @ResponseBody Iterable<Product> getAllProduct() {
	// // This returns a JSON or XML with the products
	// return productRepository.findAll();
	// }

	// // CRUD: Create
	// @PostMapping(path = "/product")
	// public ResponseEntity<Void> addProduct(@RequestBody Product product) {
	// // boolean flag = productRepository.addProduct(product);
	//
	// // insert into store
	//
	// // insert into product
	// Category category =
	// categoryRepository.findByName(product.getCategory().getName());
	// product.setCategory(category);
	// Manufacture manufacture =
	// manufactureRepository.findByName(product.getManufacture().getName());
	// product.setManufacture(manufacture);
	// productRepository.save(product);
	//
	// // insert into store_product_relation
	//
	// return new ResponseEntity<Void>(HttpStatus.OK);
	// }

	// @PostMapping(path = "store")
	// public ResponseEntity<Void> addStore(@RequestBody Store store) {
	//
	// }
	//
	// @PostMapping(path = "manufacture")
	// public ResponseEntity<Void> addManufacture(@RequestBody Manufacture
	// manufacture) {
	//
	// }
	//

	// @PostMapping("hi")
	// public ResponseEntity<List<Product>> testQuery(@RequestBody List<Product>
	// listOfProduct) {
	//
	// Iterator<Product> productIterator = listOfProduct.iterator();
	// while (productIterator.hasNext()) {
	// Product product = productIterator.next();
	//
	// // category could be null
	// Category category =
	// categoryRepository.findByName(product.getCategory().getName());
	// if (category == null) { // not exists
	// // create a new category using the given info
	// category = new Category();
	// category.setName(product.getCategory().getName());
	// category.setDescription(product.getCategory().getDescription());
	// // insert to category
	// categoryRepository.save(category);
	// }
	// product.setCategory(category);
	//
	// Manufacture manufacture =
	// manufactureRepository.findByName(product.getManufacture().getName());
	// if (manufacture == null) { // not exists
	// // create a new manufacture using the given info
	// manufacture = new Manufacture();
	// manufacture.setName(product.getManufacture().getName());
	// manufacture.setAddress(product.getManufacture().getAddress());
	// manufacture.setDescription(product.getManufacture().getDescription());
	//
	// // insert into manufacture
	// manufactureRepository.save(manufacture);
	// }
	// product.setManufacture(manufacture);
	//
	// // deal with the price in the store_product_relation
	// List<StoreProductRelation> sells = product.getStoreProductRelations();
	// for (StoreProductRelation spr : sells) {
	// // fill the info for spr
	// spr.setProduct(product);
	// spr.setQuantity(10);
	// }
	// }
	//
	// productRepository.save(listOfProduct);
	//
	// return new ResponseEntity<List<Product>>(HttpStatus.OK);
	// }
}
